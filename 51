#include <cmath>
int max(int x, int y){return (x>y)?x:y;}
int min(int x, int y){return (x<y)?x:y;}
class Solution {
public:
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<int>>Q(n,vector<int>(n,0));
        vector<vector<int>>location;
        vector<vector<string>>result;
        recursion(n,0,0,location,Q,result);
        return result;
    }
    void recursion(const int& n,const int& current, const int& current1,vector<vector<int>>& location, vector<vector<int>>Q, vector<vector<string>>& result){
        if(current>0){
            for(int j = current; j<n; j++)
                Q[j][current1] = 2;
            for(int j=1; j<min(n-current+1,n-currrent1); j++)
                Q[current-1+j][j+current1] = 2;
            for(int j=1; j<min(n-current+1,current1+1); j++)
                Q[current-1+j][current1-j] = 2;
        }
        for(int i = 0; i < n; i++){
            if(Q[current][i]==0){
                if(current == n-1){
                    vector<string>res(n,string(n,'.'));
                    for(int j = 0; j < n-1; j++)
                        res[location[j][0]][location[j][1]] = 'Q';
                    res[current][i] = 'Q';
                    result.push_back(res);
                }
                else{
                    location.push_back({current,i});
                    recursion(n,current+1,i,location, Q, result);
                    location.pop_back();
                }
            }
        }
    }
};
