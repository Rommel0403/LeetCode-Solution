class Solution {
private:
vector<vector<int>> matrix;
public:
    vector<vector<int>> &generateMatrix(int &n) {
        matrix.assign(n,(n,vector<int>(n,0)));
        int current = 1;
        recursion(current,0,n);
        return matrix;
    }

    void recursion(int& current, const int& start_n, const int&current_n){
        if(current_n==0)
            return;
        if(current_n==1)
            matrix[start_n][start_n] = current;
        else{
            for(int i=0; i<current_n-1; i++)
                matrix[start_n][start_n+i] = current++;
            for(int i=0; i<current_n-1; i++)
                matrix[start_n+i][start_n+current_n-1]=current++;
            for(int i=0; i<current_n-1; i++)
                matrix[start_n+current_n-1][start_n+current_n-1-i] = current++;
            for(int i=0; i<current_n-1; i++)
                matrix[start_n+current_n-1-i][start_n]=current++;
            recursion(current, start_n+1, current_n-2);
        }
    }
};
